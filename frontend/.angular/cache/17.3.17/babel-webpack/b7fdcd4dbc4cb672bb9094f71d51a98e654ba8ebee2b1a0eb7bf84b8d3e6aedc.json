{"ast":null,"code":"import { tap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.api = 'http://localhost:8000/api/auth';\n  }\n  login(email, password) {\n    const form = new FormData();\n    form.append('username', email);\n    form.append('password', password);\n    return this.http.post(`${this.api}/login`, form, {\n      responseType: 'json'\n    }).pipe(tap(res => localStorage.setItem('token', res.access_token)));\n  }\n  register(email, password, fullName) {\n    return this.http.post(`${this.api}/register`, {\n      email,\n      password,\n      full_name: fullName\n    });\n  }\n  logout() {\n    localStorage.removeItem('token');\n  }\n  get token() {\n    return localStorage.getItem('token');\n  }\n  isAdmin() {\n    const payload = JSON.parse(atob((this.token || '').split('.')[1]));\n    return payload.role === 'admin';\n  }\n  static {\n    this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["tap","AuthService","constructor","http","api","login","email","password","form","FormData","append","post","responseType","pipe","res","localStorage","setItem","access_token","register","fullName","full_name","logout","removeItem","token","getItem","isAdmin","payload","JSON","parse","atob","split","role","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["D:\\Sistema de Reserva de Locales\\reserva-locales\\frontend\\src\\app\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable, tap } from 'rxjs';\r\n@Injectable({ providedIn: 'root' })\r\nexport class AuthService {\r\n    private api = 'http://localhost:8000/api/auth';\r\n    constructor(private http: HttpClient) {}\r\n    login(email: string, password: string): Observable<{access_token: string}> {\r\n        const form = new FormData();\r\n        form.append('username', email);\r\n        form.append('password', password);\r\n        return this.http.post<{access_token: string}>(`${this.api}/login`, form, { responseType: 'json' })\r\n        .pipe(tap(res => localStorage.setItem('token', res.access_token)));\r\n    }\r\n    register(email: string, password: string, fullName: string) {\r\n        return this.http.post(`${this.api}/register`, {email, password, full_name: fullName});\r\n    }\r\n    logout() { \r\n        localStorage.removeItem('token'); \r\n    }\r\n    get token(): string | null { \r\n        return localStorage.getItem('token'); \r\n    }\r\n    isAdmin(): boolean {\r\n        const payload = JSON.parse(atob((this.token || '').split('.')[1]));\r\n        return payload.role === 'admin';\r\n    }\r\n}"],"mappings":"AAEA,SAAqBA,GAAG,QAAQ,MAAM;;;AAEtC,OAAM,MAAOC,WAAW;EAEpBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IADhB,KAAAC,GAAG,GAAG,gCAAgC;EACP;EACvCC,KAAKA,CAACC,KAAa,EAAEC,QAAgB;IACjC,MAAMC,IAAI,GAAG,IAAIC,QAAQ,EAAE;IAC3BD,IAAI,CAACE,MAAM,CAAC,UAAU,EAAEJ,KAAK,CAAC;IAC9BE,IAAI,CAACE,MAAM,CAAC,UAAU,EAAEH,QAAQ,CAAC;IACjC,OAAO,IAAI,CAACJ,IAAI,CAACQ,IAAI,CAAyB,GAAG,IAAI,CAACP,GAAG,QAAQ,EAAEI,IAAI,EAAE;MAAEI,YAAY,EAAE;IAAM,CAAE,CAAC,CACjGC,IAAI,CAACb,GAAG,CAACc,GAAG,IAAIC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEF,GAAG,CAACG,YAAY,CAAC,CAAC,CAAC;EACtE;EACAC,QAAQA,CAACZ,KAAa,EAAEC,QAAgB,EAAEY,QAAgB;IACtD,OAAO,IAAI,CAAChB,IAAI,CAACQ,IAAI,CAAC,GAAG,IAAI,CAACP,GAAG,WAAW,EAAE;MAACE,KAAK;MAAEC,QAAQ;MAAEa,SAAS,EAAED;IAAQ,CAAC,CAAC;EACzF;EACAE,MAAMA,CAAA;IACFN,YAAY,CAACO,UAAU,CAAC,OAAO,CAAC;EACpC;EACA,IAAIC,KAAKA,CAAA;IACL,OAAOR,YAAY,CAACS,OAAO,CAAC,OAAO,CAAC;EACxC;EACAC,OAAOA,CAAA;IACH,MAAMC,OAAO,GAAGC,IAAI,CAACC,KAAK,CAACC,IAAI,CAAC,CAAC,IAAI,CAACN,KAAK,IAAI,EAAE,EAAEO,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAClE,OAAOJ,OAAO,CAACK,IAAI,KAAK,OAAO;EACnC;;;uBAtBS9B,WAAW,EAAA+B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAXlC,WAAW;MAAAmC,OAAA,EAAXnC,WAAW,CAAAoC,IAAA;MAAAC,UAAA,EADE;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}